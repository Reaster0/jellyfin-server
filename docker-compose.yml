services:

  nginx-proxy-manager:
    container_name: 'nginx-proxy-manager'
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./nginx-proxy-manager/data:/data
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt
  
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: always
    volumes:
      #- ./jellyfin/config:/config
      - ~/Documents/jellyfin/config:/config
      - ../media:/media
      - ~/Documents/jellyfin/config.json:/jellyfin/jellyfin-web/config.json
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    ports:
      - 8096:8096
    # runtime: nvidia
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - capabilities: [gpu]
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/web/index.html"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s


  jellyseer:
    image: fallenbagel/jellyseerr
    container_name: jellyseer
    restart: always
    environment:
    # - LOG_LEVEL=debug
    - TZ=Europe/London
    - PGID=1000
    - PUID=1000
    ports:
      - 5055:5055
    volumes:
      - ./jellyseer:/app/config
    depends_on:
      - jellyfin

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: always
    ports:
      - "7878:7878"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./radarr:/config
      - ../media:/library

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: always
    ports:
      - "8989:8989"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./sonarr:/config
      - ../media:/library

  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    restart: always
    ports:
      - "8686:8686"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./lidarr:/config
      - ../media:/library
    
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: always
    ports:
      - "9696:9696"
    cap_add:
      - NET_ADMIN
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./prowlarr:/config
      - watching:/downloads  # transmission watch directory
    
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: always
    ports:
      - "9117:9117"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./jackett:/config
      - watching:/downloads # transmission watch directory
  
  flaresolverr:
    # image: flaresolverr/flaresolverr:latest
    # image: ghcr.io/flaresolverr/flaresolverr:pr-1282
    image: alexfozor/flaresolverr:pr-1300-experimental
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - PGUID=1000
      - PUID=1000
      - TZ=Europe/London
      - DRIVER=nodriver

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    restart: always
    # ports:
    #   - "9091:9091"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
      - USER=admin #optional
      - PASS=admin #optional
    volumes:
      - ./transmission:/config
      - ../media:/library
      - watching:/watch
    cap_add:
      - NET_ADMIN
    network_mode: service:protonwire
    depends_on:
      - protonwire

  protonwire:
    container_name: protonwire
    image: dperson/openvpn-client
    cap_add:
      - net_admin
    environment:
      FIREWALL: '1'
      VPNPORT: '17000'
    ports:
      - "9091:9091"
    privileged: true
    restart: unless-stopped
    security_opt:
      - label:disable
    volumes:
      - ./vpn/reaster-ovpn.ovpn:/vpn/vpn.conf:ro
      - ./vpn/credentials.txt:/vpn/credentials.txt:ro

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30
  
volumes:
  watching:
    driver: local

services:

  # our reverse proxy, default password is admin changeme
  nginx-proxy-manager:
    container_name: 'nginx-proxy-manager'
    image: 'jc21/nginx-proxy-manager:latest'
    # image: 'lepresidente/nginx-proxy-manager' # forked image with recaptcha/crowdsec if you want some security
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./nginx-proxy-manager/data:/data
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: always
    volumes:
      - ~/Documents/jellyfin/config:/config
      - ../media:/media
      - ~/Documents/jellyfin/config.json:/jellyfin/jellyfin-web/config.json
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    ports:
      - 8096:8096
    # deploy: # support for nvidia gpu
    #   resources:
    #     reservations:
    #       devices:
    #       - driver: nvidia
    #         count: 1
    #         capabilities: [gpu]
    devices: # support for amd/intel gpu
      - /dev/dri/renderD128:/dev/dri/renderD128
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/web/index.html"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s

  jellyseer: # the service that let users request media (communicate with sonarr/radarr)
    image: fallenbagel/jellyseerr
    container_name: jellyseer
    restart: always
    environment:
    # - LOG_LEVEL=debug
    - TZ=Europe/London
    - PGID=1000
    - PUID=1000
    ports:
      - 5055:5055
    volumes:
      - ./jellyseer:/app/config
    # depends_on:
    #   - jellyfin

  jfa-go: # gestion of users, password reset and invitations links
    image: hrfee/jfa-go
    container_name: jfa-go
    restart: always
    environment:
      - TZ=Europe/London
      - PGID=1000
      - PUID=1000
    ports:
      - 8056:8056
    volumes:
      - ./jfa-go:/data
      - ~/Documents/jellyfin:/jf
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - jellyfin

  radarr: # management of movies, requests etc
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: always
    ports:
      - "7878:7878"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./radarr:/config
      - ../media:/library

  sonarr: # management of series, requests etc
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: always
    ports:
      - "8989:8989"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./sonarr:/config
      - ../media:/library

  # lidarr: # management of music, requests etc
  #   image: linuxserver/lidarr
  #   container_name: lidarr
  #   restart: always
  #   ports:
  #     - "8686:8686"
  #   environment:
  #     - PGID=1000
  #     - PUID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - ./lidarr:/config
  #     - ../media:/library
    
  prowlarr: # indexer manager (for radarr, sonarr, lidarr, etc)
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: always
    ports:
      - "9696:9696"
    cap_add:
      - NET_ADMIN
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./prowlarr:/config
      - watching:/downloads  # transmission watch directory
    
  jackett: # second indexer manager (for radarr, sonarr, lidarr, etc)
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: always
    ports:
      - "9117:9117"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ./jackett:/config
      - watching:/downloads # transmission watch directory
  
  flaresolverr: # captcha solver for cloudflare (needed to bypass restrictions on some torrent sites like ygg)
    # image: flaresolverr/flaresolverr:latest
    image: alexfozor/flaresolverr:pr-1300-experimental
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - PGUID=1000
      - PUID=1000
      - TZ=Europe/London
      - DRIVER=nodriver

  transmission: # torrent client
    image: linuxserver/transmission:latest
    container_name: transmission
    restart: always
    # ports: # port not exported here because we are networking it to vpn-router
    #   - "9091:9091"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
      - USER=admin #optional
      - PASS=admin #optional
    volumes:
      - ./transmission:/config
      - ../media:/library
      - watching:/watch
    cap_add:
      - NET_ADMIN
    network_mode: service:vpn-router # forward all traffic to vpn-router
    depends_on:
      - vpn-router

  vpn-router: # vpn client to hide our ass
    container_name: vpn-router
    image: dperson/openvpn-client
    cap_add:
      - net_admin
    environment:
      FIREWALL: '1'
      VPNPORT: '17000'
    ports:
      - "9091:9091"
    privileged: true
    restart: unless-stopped
    security_opt:
      - label:disable
    volumes:
      - ./vpn/reaster-ovpn.ovpn:/vpn/vpn.conf:ro
      - ./vpn/credentials.txt:/vpn/credentials.txt:ro
    healthcheck:
      test: ["CMD", "curl", "ip.me"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s

  watchtower: # optional, auto-update of containers
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_SCHEDULE: 0 4 * * * *
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_DEBUG: "true"
  
volumes:
  watching: # the local volume needed for the link radarr/sonarr -> transmission
    driver: local
